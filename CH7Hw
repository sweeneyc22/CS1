/* 7.17
public class Main {
    public Main() {
    }

    public static void main(String[] args) {
        int[] myArray = new int[100000];
        int key = (int)(Math.random() * 200.0D);
        fillArray(myArray);
        linearSearch(myArray, key);
        binarySearch(myArray, key);
    }

    private static int binarySearch(int[] myArray, int key) {
        int totalKeysFound = false;
        int low = 0;
        int high = myArray.length - 1;
        long startTime = System.currentTimeMillis();

        while(high >= low) {
            int mid = (low + high) / 2;
            if (key < myArray[mid]) {
                high = mid - 1;
            } else {
                if (key == myArray[mid]) {
                    return mid;
                }

                low = mid + 1;
            }
        }

        long endTime = System.currentTimeMillis();
        long executionTime = endTime - startTime;
        System.out.println("Execution time of invoking the binarySearch in milliseconds: " + executionTime);
        return -low - 1;
    }

    private static void linearSearch(int[] myArray, int key) {
        System.out.println("Linear Search beginning");
        long startTime = System.currentTimeMillis();
        int totalKeysFound = 0;

        for(int i = 0; i < myArray.length; ++i) {
            if (key == myArray[i]) {
                ++totalKeysFound;
            }
        }

        System.out.println("The key is: " + key);
        System.out.println("They key was found in the linear search " + totalKeysFound + " times.");
        long endTime = System.currentTimeMillis();
        long executionTime = endTime - startTime;
        System.out.println("Linear Search finished in: " + executionTime + " milliseconds");
    }

    private static void printArray(int[] myArray) {
        for(int i = 0; i < myArray.length; ++i) {
            System.out.println(myArray[i]);
        }

    }

    private static int[] fillArray(int[] myArray) {
        for(int i = 0; i < myArray.length; ++i) {
            myArray[i] = (int)(Math.random() * 100.0D);
        }

        return myArray;
    }
*\

/* 7.18
package com.company;

class Ch718 {


    public static void main(String[] args) {
        int[] myArray = new int[10];
        for (int i = 0; i < myArray.length; i++) {
            myArray[i] = (int) (Math.random() * 100);
        }

        bubbleSort();


        private static void bubbleSort ( int[] myArray){
            double temp;
            boolean swapped;

            do {
                swapped = false;
                for (int i = 0; i < myArray.length - 1; i++) {
                    // If a neighboring pair is not in order, swap values
                    if (myArray[i] > myArray[i + 1]) {
                        temp = myArray[i];
                        myArray[i] = myArray[i + 1];
                        myArray[i + 1] = temp;
                        swapped = true;
                    }
                }
            } while (swapped); // Repeat if a value was swapped
        }
    }
}
*\

/* 7.21
public class    Main {

    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        System.out.print("Enter the number of balls to drop: ");
        int numberOfBalls = input.nextInt();
        String[] ballPaths = new String[numberOfBalls];

        System.out.print("Enter the number of slots in the bean machine: ");
        int numberOfSlots = input.nextInt();
        int[] slots = new int[numberOfSlots];

        // display ball paths
        for (int i = 0; i < numberOfBalls; i++) {
            ballPaths[i] = dropBall(slots);
            System.out.printf("%10s\n", ballPaths[i]);
        }

        // display game
        System.out.println("");
        printArray(slots, numberOfBalls);
    }

    public static String dropBall(int[] slot) {

        StringBuilder ballPath = new StringBuilder();


        for (int i = 0; i < slot.length - 1; i++) {
            int random = (int)(Math.random() * 10) % 2;
            if (random > 0) ballPath.append("R");
            else ballPath.append("L");
        }
        int position = getBallPosition(ballPath.toString(), 'R');
        slot[position]++;
        return ballPath.toString();

    }

    public static int getBallPosition(String str, char a) {

        int count = 0;
        for (int i = 0; i < str.length(); i++) {

            if (str.charAt(i) == a) count++;

        }

        return count;
    }


    public static void printArray(int[] slots, int numberOfBalls) {

            while (!isEmpty(slots)) {

                if (isRowEmpty(slots, numberOfBalls)) {
                    numberOfBalls--;
                    continue;
                }
                for (int i = 0; i < slots.length; i++) {

                    if (slots[i] >= numberOfBalls) {
                        System.out.printf("%2c", 'O');
                        slots[i]--;
                    }
                    else System.out.printf("%2c", ' ');

                }
                numberOfBalls--;
                System.out.println("");

            }

    }

    public static boolean isEmpty(int[] slots) {

        for (int slot : slots) {
            if (slot != 0) {
                return false;
            }
        }

        return true;
    }

    public static boolean isRowEmpty(int[] slots, int rowNum) {

        for (int slot : slots) {
            if (slot == rowNum) {
                return false;
            }
        }

        return true;
    }



}
*\
