/*
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        // write your code here
        Scanner input = new Scanner(System.in);

        System.out.println("Enter 3 doubles to be sorted.");
        double number1 = input.nextDouble();
        double number2 = input.nextDouble();
        double number3 = input.nextDouble();

        sortNumbers(number1, number2, number3);
    }

    private static void sortNumbers(double number1, double number2, double number3) {
        double temp; // Hold number to swap

        if (number2 < number1 && number2 < number3) {
            temp = number1;
            number1 = number2;
            number2 = temp;
        } else if (number3 < number1 && number3 < number2) {
            temp = number1;
            number1 = number3;
            number3 = temp;
        }
        if (number3 < number2) {
            temp = number2;
            number2 = number3;
            number3 = temp;
        }

        // Display result
        System.out.println(number1 + " " + number2 + " " + number3);
    }
}



*/

/*
package com.company;

public class Main {

    public static void main(String[] args) {
        int lastRoll = rollDice();

        int determinedResult = determineResult(lastRoll);

        if (determinedResult == 0) {
            // if loss
            System.out.println("Loss!");
        } else if (determinedResult == 1) {
            System.out.println("Win!");
        }


    }

    private static int rollDice() {
        int roll1 = (int) (Math.random() * 6 + 1);
        int roll2 = (int) (Math.random() * 6 + 1);
        int sumOfRoll = roll1 + roll2;
        return sumOfRoll;
    }

    private static int determineResult(int lastRoll) {
        switch (lastRoll) {
            case 2:
            case 3:
            case 12:
                return 0;
            case 1:
            case 4:
            case 5:
            case 6:
            case 8:
            case 9:
            case 10:
                point(lastRoll);
                return 1;
            case 7:
            case 11:
                return 1;

            default:
                throw new IllegalStateException("Unexpected value: " + lastRoll);
        }


    }

    private static int point(int lastRoll) {
        int nextRoll = rollDice();
        while (nextRoll != lastRoll && nextRoll != 7) {
            nextRoll = rollDice();
            if (nextRoll == lastRoll) {
                return 1;
            } else if (nextRoll == 7) {
                return 0;
            }
        }
        return nextRoll;
    }
}
*/


/* 
package com.company;

public class Main {

    public static void main(String[] args) {
        int iterations = 10000; // How many times you would like to run the code.
        int totalWins = 0, totalLosses = 0;

        for (int i = 0; i < iterations; i++) {
            if (playCraps() == 1) {
                totalWins++;
            } else {
                totalLosses++;
            }
        } // Play craps 10,000 times
        System.out.println(totalLosses + " losses and " + totalWins);

    }

    private static int playCraps() {
        int lastRoll = rollDice();
        switch (lastRoll) {
            case 2:
            case 3:
            case 12:
                return 0;
            case 1:
            case 4:
            case 5:
            case 6:
            case 8:
            case 9:
            case 10:
                point(lastRoll);
                break;
            case 7:
            case 11:
                return 1;

            default:
                throw new IllegalStateException("Unexpected value: " + lastRoll);
        }
        return lastRoll;
    }

    private static int point(int lastRoll) {
        int nextRoll = rollDice();
        while (nextRoll != lastRoll && nextRoll != 7) {
            nextRoll = rollDice();
            if (nextRoll == lastRoll) {
                return 1;
            } else if (nextRoll == 7) {
                return 0;
            }
        }
        return nextRoll;
    }

    private static int rollDice() {
        int min = 1;
        int max = 6;
        int roll1 = (int) (Math.random() * (max - min + 1) + min);
        int roll2 = (int) (Math.random() * (max - min + 1) + min);
        int sum = roll1 + roll2;
        return sum;
    }
}
*/
